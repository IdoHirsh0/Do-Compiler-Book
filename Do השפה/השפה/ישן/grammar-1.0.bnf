# PROGRAM
<program> ::= <functions> <EOF>

# FUNCTIONS
<functions> ::= <function> <functions> | <EMPTY>
<function> ::= <DATA_TYPE> "function" <IDENTIFIER> "(" <params_decls> ")" <block>
<params_decls> ::= <params_decls_list> | <EMPTY>
<params_decls_list> ::=  <param_decl> "," <params_decls_list> | <param_decl>
<param_decl> ::= <DATA_TYPE> <IDENTIFIER>

# STATEMENTS
<stmt> ::= <block> | <if_else_stmt> | <while_loop_stmt> | <return_stmt> | <var_decl_stmt> | <assignment_stmt> | <expr_stmt> | ";"
## block
<block> ::= "{" <stmt_list> "}"
<stmt_list> ::=  <stmt> <stmt_list> | <EMPTY>
## if else
<if_else_stmt> ::= <if_stmt> <else_stmt>
<if_stmt> ::= "if" "(" <expr> ")" <block>
<else_stmt> ::= "else" <block> | <EMPTY>
## loop
<while_loop_stmt> ::= "while" "(" <expr> ")" <block>
## return
<return_stmt> ::= "return" <expr> ";"
## variable declaration
<var_decl_stmt> ::= <DATA_TYPE> <IDENTIFIER> <var_decl_stmt_list> ";"
<var_decl_stmt_list> ::= "," <IDENTIFIER> <var_decl_stmt_list> | <EMPTY>
## assignment
<assignment_stmt> ::= <IDENTIFIER> "=" <expr> ";"
## expression
<expr_stmt> ::= <expr> ";"

# EXPRESSIONS
<expr> ::= <LITERAL> | <IDENTIFIER> | "(" <expr> ")" | <func_call_expr> | <binary_expr> | <unary_expr> | <indexing_expr>
## indexing
<indexing_expr> ::= <IDENTIFIER> "[" <expr> "]"
## function call
<func_call_expr> ::= "call" <IDENTIFIER> "(" <args_list> ")"
<args_list> ::= <args_list_expand> | <EMPTY>
<args_list_expand> ::= <expr> "," <args_list_expand> | <expr>
## binary
<binary_expr> ::= <expr> <binary_op> <expr>
<binary_op> ::= <arithmatic_op> | <logical_op> | ","
<arithmatic_op> ::= "+" | "-" | "*" | "/" | "%"
<logical_op> ::= "==" | "!=" | "<" | "<=" | ">" | ">=" | "||" | "&&"
## unary
<unary_expr> ::= <prefix_op> <expr> | <expr> <postfix_op>
<prefix_op> ::= "-" | "!" | "++" | "--"
<postfix_op> ::= "++" | "--"

# DATA TYPES
<DATA_TYPE> ::= "int" | "char"

# IDENTIFIERS
<IDENTIFIER> ::= <identifier_start> <identifier_end>
<identifier_start> ::= <letter> | "_"
<identifier_end> ::= <letter> <identifier_end> | "_" <identifier_end> | <digit> <identifier_end> | <EMPTY>

<letter> ::= ["a" - "z"] | ["A" - "Z"]
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

# LITERALS
<LITERAL> ::= <number_literal> | <character_literal> | <string_literal>
## number
<number_literal> ::= <number_sign> <digits_stream>
<digits_stream> ::= <digit> <digits_stream_expand>
<digits_stream_expand> ::= <digit> <digits_stream_expand> | <EMPTY>
<number_sign> ::= "+" | "-" | <EMPTY>
## character
<character_literal> ::= "'" <character> "'"
<character> ::= <letter> | <digit> | <special_characters>
<special_characters> ::= "_" | "-" | "+" | "*" | "/" | ":" | ";" |
                         "," | "." | "=" | "(" | ")" | "[" | "]" | 
                         "{" | "}" | "!" | "@" | "#" | "$" | "%" | 
                         "^" | "&" | "|" | "<" | ">" | "?" | 
                         "\0" | "\n" | "\t" 
                         <white_space>
<white_space> ::= " "  # Add more white space characters?
## string
<string_literal> ::= "\"" <character_stream> "\""
<character_stream> ::= <character> <character_stream> | <EMPTY>

# COMMENTS ?

# I/O ?
