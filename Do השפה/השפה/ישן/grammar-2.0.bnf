# PROGRAM
<program> ::= "prog" <IDENTIFIER> <function> "prog" <EOF>

# FUNCTIONS
<function> ::= <DATA_TYPE> "func" <IDENTIFIER> "(" <params> ")" ":" <block> "func" <function> | "end"
<params> ::= <params_expand> | <EMPTY>
<params_expand> ::= <DATA_TYPE> <IDENTIFIER> "," <params_expand> | <DATA_TYPE> <IDENTIFIER>

# BLOCK
<block> ::= <stmt> ";" <block> | "end"

# STATEMENTS
<stmt> ::= <return_stmt> | <func_call_stmt> | <var_decl_stmt> | <assignment_stmt> | <if_else_stmt> | <while_stmt>
## return
<return_stmt> ::= "return" <LIexpr>
## function call
<func_call_stmt> ::= "call" <IDENTIFIER> "(" <args> ")"
<args> ::= <args_expand> | <EMPTY> 
<args_expand> ::=  <LIexpr> "," <args_expand> | <LIexpr>
## variable declarations
<var_decl_stmt> ::= <DATA_TYPE> <IDENTIFIER> <var_decl_stmt_expand>
<var_decl_stmt_expand> ::= "," <IDENTIFIER> <var_decl_stmt_expand> | <EMPTY>
## assignment
<assignment_stmt> ::= "let" <IDENTIFIER> "=" <LIexpr>
## if else
<if_else_stmt> ::= "if" "(" <LIexpr> ")" ":" <block> "if" <else_stmt>
<else_stmt> ::= "else" ":" <block> "else" | <EMPTY> 
## while
<while_stmt> ::= "while" "(" <LIexpr> ")" ":" <block> "while"

# EXPRESSIONS
<LIexpr> ::= <HIexpr> <LIexprB>
<HIexpr> ::= <operand> <HIexprB>
<HIexprB> ::= <HIoperator> <operand> <HIexprB> | <EMPTY> 
<LIexprB> ::= <LIoperator> <HIexpr> <LIexprB> | <EMPTY>

<operand> ::= <IDENTIFIER> | <LITERAL> | "(" <LIexpr> ")" | "!" <operand> | "-" <operand> | <func_call_stmt>

<LIoperator> ::= "+" | "-" | "||" | "&&"
<HIoperator> ::= "*" | "/" | "%" | "==" | "!=" | ">" | ">=" | "<" | "<="
